[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ilmar\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ilmar\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 17.0.4.1)
[debug]       Load.loadUnit: plugins took 116.7856ms
[debug]       Load.loadUnit: defsScala took 0.3351ms
[debug] [Loading] Scanning directory C:\Users\ilmar\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ilmar\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.4624 ms
[debug]           Load.resolveProject(global-plugins) took 56.0187ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ilmar\.sbt\1.0\plugins, plugins: List(<none>))) took 107.1806ms
[debug] [Loading] Done in C:\Users\ilmar\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 138.2438ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2785ms
[debug]     Load.loadUnit(file:/C:/Users/ilmar/.sbt/1.0/plugins/, ...) took 267.6947ms
[debug]   Load.apply: load took 485.503ms
[debug]   Load.apply: resolveProjects took 6.8131ms
[debug]   Load.apply: finalTransforms took 66.5463ms
[debug]   Load.apply: config.delegates took 8.3214ms
[debug]   Load.apply: Def.make(settings)... took 374.7195ms
[debug]   Load.apply: structureIndex took 100.122ms
[debug]   Load.apply: mkStreams took 1.816ms
[info] loading global plugins from C:\Users\ilmar\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2227.9348ms
[debug]           Load.loadUnit: plugins took 26.5359ms
[debug]           Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\Users\ilmar\Documents\Aalto\StrategyGame\project
[debug]             Load.loadUnit: mkEval took 7.0753ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ilmar\Documents\Aalto\StrategyGame\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.7353 ms
[info] loading settings for project strategygame-build from idea1.sbt ...
[debug]               Load.resolveProject(strategygame-build) took 4.1209ms
[debug]             Load.loadTransitive: finalizeProject(Project(id strategygame-build, base: C:\Users\ilmar\Documents\Aalto\StrategyGame\project, plugins: List(<none>))) took 6.426ms
[debug] [Loading] Done in C:\Users\ilmar\Documents\Aalto\StrategyGame\project, returning: (strategygame-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2082.1211ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.9811ms
[debug]         Load.loadUnit(file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/project/, ...) took 2116.8185ms
[debug]       Load.apply: load took 2118.7161ms
[debug]       Load.apply: resolveProjects took 0.1237ms
[debug]       Load.apply: finalTransforms took 12.3237ms
[debug]       Load.apply: config.delegates took 0.4845ms
[debug]       Load.apply: Def.make(settings)... took 82.3344ms
[debug]       Load.apply: structureIndex took 32.0598ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\ilmar\Documents\Aalto\StrategyGame\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3425.1743ms
[debug]     Load.loadUnit: defsScala took 0.0026ms
[debug] [Loading] Scanning directory C:\Users\ilmar\Documents\Aalto\StrategyGame
[debug]       Load.loadUnit: mkEval took 0.2544ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2289 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 34.3194ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\ilmar\Documents\Aalto\StrategyGame, plugins: List(<none>))) took 38.0705ms
[debug] [Loading] Done in C:\Users\ilmar\Documents\Aalto\StrategyGame, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1009.2387ms
[debug]     Load.loadUnit: cleanEvalClasses took 20.7155ms
[debug]   Load.loadUnit(file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/, ...) took 4456.2042ms
[debug] Load.apply: load took 4458.0683ms
[debug] Load.apply: resolveProjects took 0.115ms
[debug] Load.apply: finalTransforms took 27.6568ms
[debug] Load.apply: config.delegates took 0.3227ms
[debug] Load.apply: Def.make(settings)... took 55.8807ms
[debug] Load.apply: structureIndex took 23.1037ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to StrategyGame (in build file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 65362 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 65362, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to StrategyGame (in build file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/)
[debug] > Exec(idea-shell, None, None)

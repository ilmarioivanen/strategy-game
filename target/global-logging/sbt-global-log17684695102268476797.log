[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\ilmar\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\ilmar\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 17.0.6)
[debug]       Load.loadUnit: plugins took 98.7926ms
[debug]       Load.loadUnit: defsScala took 0.5589ms
[debug] [Loading] Scanning directory C:\Users\ilmar\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ilmar\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.9121 ms
[debug]           Load.resolveProject(global-plugins) took 52.0413ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\ilmar\.sbt\1.0\plugins, plugins: List(<none>))) took 101.0376ms
[debug] [Loading] Done in C:\Users\ilmar\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 136.0537ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2654ms
[debug]     Load.loadUnit(file:/C:/Users/ilmar/.sbt/1.0/plugins/, ...) took 248.0539ms
[debug]   Load.apply: load took 459.3843ms
[debug]   Load.apply: resolveProjects took 6.4668ms
[debug]   Load.apply: finalTransforms took 62.3862ms
[debug]   Load.apply: config.delegates took 9.0082ms
[debug]   Load.apply: Def.make(settings)... took 370.1975ms
[debug]   Load.apply: structureIndex took 112.1082ms
[debug]   Load.apply: mkStreams took 1.9428ms
[info] loading global plugins from C:\Users\ilmar\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2275.6013ms
[debug]           Load.loadUnit: plugins took 28.9395ms
[debug]           Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory C:\Users\ilmar\Documents\Aalto\StrategyGame\project
[debug]             Load.loadUnit: mkEval took 6.0879ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\ilmar\Documents\Aalto\StrategyGame\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9049 ms
[info] loading settings for project strategygame-build from idea.sbt ...
[debug]               Load.resolveProject(strategygame-build) took 2.9621ms
[debug]             Load.loadTransitive: finalizeProject(Project(id strategygame-build, base: C:\Users\ilmar\Documents\Aalto\StrategyGame\project, plugins: List(<none>))) took 5.5237ms
[debug] [Loading] Done in C:\Users\ilmar\Documents\Aalto\StrategyGame\project, returning: (strategygame-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 143.8481ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.0004ms
[debug]         Load.loadUnit(file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/project/, ...) took 180.9492ms
[debug]       Load.apply: load took 182.9096ms
[debug]       Load.apply: resolveProjects took 0.1344ms
[debug]       Load.apply: finalTransforms took 9.5708ms
[debug]       Load.apply: config.delegates took 0.4056ms
[debug]       Load.apply: Def.make(settings)... took 83.4066ms
[debug]       Load.apply: structureIndex took 30.548ms
[debug]       Load.apply: mkStreams took 0.0025ms
[info] loading project definition from C:\Users\ilmar\Documents\Aalto\StrategyGame\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1454.4009ms
[debug]     Load.loadUnit: defsScala took 0.0024ms
[debug] [Loading] Scanning directory C:\Users\ilmar\Documents\Aalto\StrategyGame
[debug]       Load.loadUnit: mkEval took 0.2624ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1782 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 41.6681ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\ilmar\Documents\Aalto\StrategyGame, plugins: List(<none>))) took 45.2797ms
[debug] [Loading] Done in C:\Users\ilmar\Documents\Aalto\StrategyGame, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2515.7296ms
[debug]     Load.loadUnit: cleanEvalClasses took 24.0003ms
[debug]   Load.loadUnit(file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/, ...) took 3995.1391ms
[debug] Load.apply: load took 3997.2954ms
[debug] Load.apply: resolveProjects took 0.0968ms
[debug] Load.apply: finalTransforms took 22.3997ms
[debug] Load.apply: config.delegates took 0.3346ms
[debug] Load.apply: Def.make(settings)... took 68.7098ms
[debug] Load.apply: structureIndex took 22.9768ms
[debug] Load.apply: mkStreams took 0.0031ms
[info] set current project to StrategyGame (in build file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55858 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55858, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to StrategyGame (in build file:/C:/Users/ilmar/Documents/Aalto/StrategyGame/)
[debug] > Exec(idea-shell, None, None)
